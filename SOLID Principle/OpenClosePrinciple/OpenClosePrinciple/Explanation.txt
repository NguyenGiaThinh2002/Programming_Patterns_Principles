++ The Open/Closed Principle (OCP) is one of the five SOLID principles of object-oriented design, 
introduced by Robert C. Martin. 
- It states that software entities (classes, modules, functions, etc.) should be open for extension 
but closed for modification. 
- This means you should be able to add new functionality to a system without altering existing code, 
thereby reducing the risk of introducing bugs into stable, tested code.
++ Key Concepts of OCP
- Open for Extension: You can add new behavior or functionality to a class or module without changing its source code,
typically through inheritance, interfaces, or composition.
- Closed for Modification: The existing code of the class or module should not need to be changed 
when new functionality is added.
- Goal: Improve maintainability, scalability, and flexibility of the codebase while minimizing 
the risk of breaking existing functionality.

In C#, OCP is typically achieved using interfaces, abstract classes, polymorphism, and dependency injection.

++ Common Techniques to Achieve OCP in C#

1. Interfaces: Define a contract that all implementations follow (as shown above).
2. Abstract Classes: Use abstract base classes when you want to provide some common functionality 
while allowing extensions.
3. Polymorphism: Leverage polymorphic behavior to handle different types dynamically.
4. Dependency Injection: Inject dependencies (e.g., via constructor or method parameters) 
to make classes more flexible and extensible.
5. Strategy Pattern: Encapsulate behaviors in separate classes that implement a common interface,
allowing swapping of behaviors without modifying the client code.
6. Factory Pattern: Use factories to create instances of classes dynamically, 
supporting new types without changing existing code.