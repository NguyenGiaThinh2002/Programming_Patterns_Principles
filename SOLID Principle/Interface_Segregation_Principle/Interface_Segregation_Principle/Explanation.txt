++ The Interface Segregation Principle (ISP) is one of the five SOLID principles of object-oriented design, 
introduced by Robert C. Martin. It states that clients should not be forced to depend on interfaces they do not use.
- In other words, interfaces should be specific and focused, so that implementing classes only need to 
provide the behavior relevant to their purpose, avoiding unnecessary or irrelevant methods.

++ Key Concepts of ISP
- Client-Specific Interfaces: Interfaces should be tailored to the needs of the clients (classes or modules) 
that use them, rather than being overly broad or general.
- Avoid "Fat" Interfaces: Large interfaces with many methods force implementing classes to 
provide implementations for methods they don’t need, leading to bloated or irrelevant code.
- Goal: Create cohesive, minimal interfaces that make systems easier to understand, implement, and maintain.

In C#, ISP is applied by designing small, focused interfaces that align with the specific responsibilities of 
the classes implementing them.

++ Real-World Example
- Consider a document processing system with an IDocument interface that includes methods for 
Print, Scan, and Fax. A modern printer might support all three, but a basic scanner only supports Scan. 
- Forcing the scanner to implement Print and Fax violates ISP. 
Instead, create separate interfaces like IPrintable, IScannable, and IFaxable, so each device only 
implements the relevant interfaces.

++ Caveats and Considerations
- Over-Segmentation: Creating too many tiny interfaces can lead to complexity 
and make the codebase harder to navigate. Balance specificity with practicality.
- Design Upfront: Anticipate where segregation is needed to avoid refactoring later, 
but don’t over-engineer for unlikely scenarios.
- Testing: Ensure that each interface’s contract is clear and that implementations adhere to it consistently.

++ Conclusion
- The Interface Segregation Principle ensures that interfaces are focused and relevant to the classes 
that implement them, preventing clients from depending on methods they don’t need. 
- In C#, ISP is achieved by designing small, cohesive interfaces tailored to specific behaviors. 
- By adhering to ISP, you create flexible, maintainable, and robust systems that avoid unnecessary dependencies 
and reduce the risk of errors.